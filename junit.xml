<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="83" failures="0" time="9.434">
  <testsuite name="XFilter" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:46" time="2.715" tests="9">
    <testcase classname="XFilter should start with both buit-in and custom filters" name="XFilter should start with both buit-in and custom filters" time="0.002">
    </testcase>
    <testcase classname="XFilter call should return input data if filter id is not found" name="XFilter call should return input data if filter id is not found" time="0.002">
    </testcase>
    <testcase classname="XFilter call should call filter by id" name="XFilter call should call filter by id" time="0.001">
    </testcase>
    <testcase classname="XFilter exec should return input data if that is not array" name="XFilter exec should return input data if that is not array" time="0">
    </testcase>
    <testcase classname="XFilter exec should thorw error if schema is not defined" name="XFilter exec should thorw error if schema is not defined" time="0.001">
    </testcase>
    <testcase classname="XFilter exec should only use valid filters" name="XFilter exec should only use valid filters" time="0.001">
    </testcase>
    <testcase classname="XFilter exec should return only filter what schema defined" name="XFilter exec should return only filter what schema defined" time="0.002">
    </testcase>
    <testcase classname="XFilter exec should filter flattern items successfully" name="XFilter exec should filter flattern items successfully" time="0.002">
    </testcase>
    <testcase classname="XFilter exec should filter items with childs successfully" name="XFilter exec should filter items with childs successfully" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="filters.toSlug" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:49" time="0.434" tests="2">
    <testcase classname="filters.toSlug should retrun payload to string successfullyif it&apos;s not valid string" name="filters.toSlug should retrun payload to string successfullyif it&apos;s not valid string" time="0.004">
    </testcase>
    <testcase classname="filters.toSlug should return slugified string" name="filters.toSlug should return slugified string" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="filters.concat" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:49" time="0.409" tests="3">
    <testcase classname="filters.concat should concat non-array payload with array values" name="filters.concat should concat non-array payload with array values" time="0.009">
    </testcase>
    <testcase classname="filters.concat should concat array payload with value" name="filters.concat should concat array payload with value" time="0.001">
    </testcase>
    <testcase classname="filters.concat should concat array payload with no values" name="filters.concat should concat array payload with no values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.replace" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:50" time="0.389" tests="6">
    <testcase classname="filters.replace should return input data if it&apos;s not truthy string or number" name="filters.replace should return input data if it&apos;s not truthy string or number" time="0.003">
    </testcase>
    <testcase classname="filters.replace should not touch input data if both hash and pattern is not truthy" name="filters.replace should not touch input data if both hash and pattern is not truthy" time="0">
    </testcase>
    <testcase classname="filters.replace should replace with both hash and pattern" name="filters.replace should replace with both hash and pattern" time="0.001">
    </testcase>
    <testcase classname="filters.replace should return replace value with reference" name="filters.replace should return replace value with reference" time="0.001">
    </testcase>
    <testcase classname="filters.replace should only replace value if reference is truthy" name="filters.replace should only replace value if reference is truthy" time="0">
    </testcase>
    <testcase classname="filters.replace should replace with normal relace value" name="filters.replace should replace with normal relace value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.parseDatetime" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:50" time="0.314" tests="7">
    <testcase classname="filters.parseDatetime should return input payload if its not truthy value" name="filters.parseDatetime should return input payload if its not truthy value" time="0.002">
    </testcase>
    <testcase classname="filters.parseDatetime should return input payload if its not string ỏ number value" name="filters.parseDatetime should return input payload if its not string ỏ number value" time="0.011">
    </testcase>
    <testcase classname="filters.parseDatetime should parse unix time successfully" name="filters.parseDatetime should parse unix time successfully" time="0.003">
    </testcase>
    <testcase classname="filters.parseDatetime should valid ISO Date string immediately" name="filters.parseDatetime should valid ISO Date string immediately" time="0.001">
    </testcase>
    <testcase classname="filters.parseDatetime should match datetime successfully" name="filters.parseDatetime should match datetime successfully" time="0.001">
    </testcase>
    <testcase classname="filters.parseDatetime should parser relative datetime successfully" name="filters.parseDatetime should parser relative datetime successfully" time="0.003">
    </testcase>
    <testcase classname="filters.parseDatetime should return input payload if we cannot parse to any date value" name="filters.parseDatetime should return input payload if we cannot parse to any date value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.parseStringTime" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:51" time="0.378" tests="6">
    <testcase classname="filters.parseStringTime should return input data if it&apos;s not valid string" name="filters.parseStringTime should return input data if it&apos;s not valid string" time="0.002">
    </testcase>
    <testcase classname="filters.parseStringTime should return input data if opts is not valid)" name="filters.parseStringTime should return input data if opts is not valid)" time="0.001">
    </testcase>
    <testcase classname="filters.parseStringTime should return input data if datetime after cleanup is not valid string" name="filters.parseStringTime should return input data if datetime after cleanup is not valid string" time="0.006">
    </testcase>
    <testcase classname="filters.parseStringTime should return input data if parsed datetime is falsy value" name="filters.parseStringTime should return input data if parsed datetime is falsy value" time="0">
    </testcase>
    <testcase classname="filters.parseStringTime should return payload if datetime string is not valid datetime" name="filters.parseStringTime should return payload if datetime string is not valid datetime" time="0.001">
    </testcase>
    <testcase classname="filters.parseStringTime should using format and locale" name="filters.parseStringTime should using format and locale" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="filters.parseRelativeTime" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:51" time="0.369" tests="6">
    <testcase classname="filters.parseRelativeTime should return input data if it&apos;s not valid string" name="filters.parseRelativeTime should return input data if it&apos;s not valid string" time="0.002">
    </testcase>
    <testcase classname="filters.parseRelativeTime should return input data if pattern is not provided)" name="filters.parseRelativeTime should return input data if pattern is not provided)" time="0.001">
    </testcase>
    <testcase classname="filters.parseRelativeTime should return input data if datetime after cleanup is not valid string" name="filters.parseRelativeTime should return input data if datetime after cleanup is not valid string" time="0">
    </testcase>
    <testcase classname="filters.parseRelativeTime should return input data if string is not matched" name="filters.parseRelativeTime should return input data if string is not matched" time="0">
    </testcase>
    <testcase classname="filters.parseRelativeTime should return input data if time is not valid number" name="filters.parseRelativeTime should return input data if time is not valid number" time="0.001">
    </testcase>
    <testcase classname="filters.parseRelativeTime should parse relative time successfully" name="filters.parseRelativeTime should parse relative time successfully" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="filters.toString" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:51" time="0.308" tests="1">
    <testcase classname="filters.toString should convert payload to string successfully" name="filters.toString should convert payload to string successfully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="filters.set" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:52" time="0.308" tests="3">
    <testcase classname="filters.set should override value by default" name="filters.set should override value by default" time="0.003">
    </testcase>
    <testcase classname="filters.set should NOT override value if input data is truthy" name="filters.set should NOT override value if input data is truthy" time="0">
    </testcase>
    <testcase classname="filters.set should override with reference" name="filters.set should override with reference" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.JSONParse" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:52" time="0.337" tests="3">
    <testcase classname="filters.JSONParse should return input data if it is not valid string" name="filters.JSONParse should return input data if it is not valid string" time="0.006">
    </testcase>
    <testcase classname="filters.JSONParse should return input data if it is not valid json string" name="filters.JSONParse should return input data if it is not valid json string" time="0.001">
    </testcase>
    <testcase classname="filters.JSONParse should return object from json string" name="filters.JSONParse should return object from json string" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="filters.toScopeId" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:52" time="0.287" tests="4">
    <testcase classname="filters.toScopeId should return input data if opts.prop or payload are not truthy" name="filters.toScopeId should return input data if opts.prop or payload are not truthy" time="0.012">
    </testcase>
    <testcase classname="filters.toScopeId should return input data if payload is not string or number" name="filters.toScopeId should return input data if payload is not string or number" time="0.001">
    </testcase>
    <testcase classname="filters.toScopeId should generate scope id with valid opts.prop" name="filters.toScopeId should generate scope id with valid opts.prop" time="0.001">
    </testcase>
    <testcase classname="filters.toScopeId should always using last segment of scope id to generate new scope id" name="filters.toScopeId should always using last segment of scope id to generate new scope id" time="0">
    </testcase>
  </testsuite>
  <testsuite name="filters.getURLSearchParams" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:53" time="0.269" tests="3">
    <testcase classname="filters.getURLSearchParams should return input data if opts.prop is not valid string" name="filters.getURLSearchParams should return input data if opts.prop is not valid string" time="0.002">
    </testcase>
    <testcase classname="filters.getURLSearchParams should return input data if payload is not valid url" name="filters.getURLSearchParams should return input data if payload is not valid url" time="0.002">
    </testcase>
    <testcase classname="filters.getURLSearchParams should return search param successfully" name="filters.getURLSearchParams should return search param successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.parseUnixTime" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:53" time="0.307" tests="4">
    <testcase classname="filters.parseUnixTime should return input data if it&apos;s not valid numbers" name="filters.parseUnixTime should return input data if it&apos;s not valid numbers" time="0.002">
    </testcase>
    <testcase classname="filters.parseUnixTime should return input data if payload is not a number with valid length (10 or 13 numbers)" name="filters.parseUnixTime should return input data if payload is not a number with valid length (10 or 13 numbers)" time="0.001">
    </testcase>
    <testcase classname="filters.parseUnixTime should parse second time successfully" name="filters.parseUnixTime should parse second time successfully" time="0.001">
    </testcase>
    <testcase classname="filters.parseUnixTime should parse millisecond time successfully" name="filters.parseUnixTime should parse millisecond time successfully" time="0">
    </testcase>
  </testsuite>
  <testsuite name="filters.get" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:53" time="0.287" tests="2">
    <testcase classname="filters.get should return input data if opts.prop is not valid string" name="filters.get should return input data if opts.prop is not valid string" time="0.008">
    </testcase>
    <testcase classname="filters.get should return value successfully" name="filters.get should return value successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.divide" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:53" time="0.258" tests="3">
    <testcase classname="filters.divide should retrun input data if dividend is not finite number" name="filters.divide should retrun input data if dividend is not finite number" time="0.002">
    </testcase>
    <testcase classname="filters.divide should return input payload if opts.divisor is not valid finite number" name="filters.divide should return input payload if opts.divisor is not valid finite number" time="0.001">
    </testcase>
    <testcase classname="filters.divide should divide successfully" name="filters.divide should divide successfully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.template" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:54" time="0.27" tests="2">
    <testcase classname="filters.template should return input data if template string is not provided" name="filters.template should return input data if template string is not provided" time="0.002">
    </testcase>
    <testcase classname="filters.template should return string with template" name="filters.template should return string with template" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="filters.formatURL" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:54" time="0.262" tests="4">
    <testcase classname="filters.formatURL should return input data if opts.prop or payload are not truthy" name="filters.formatURL should return input data if opts.prop or payload are not truthy" time="0.003">
    </testcase>
    <testcase classname="filters.formatURL should return input data if payload is not string or number" name="filters.formatURL should return input data if payload is not string or number" time="0.001">
    </testcase>
    <testcase classname="filters.formatURL should return input payload if payload is already valid url" name="filters.formatURL should return input payload if payload is already valid url" time="0.002">
    </testcase>
    <testcase classname="filters.formatURL should return formatted url" name="filters.formatURL should return formatted url" time="0">
    </testcase>
  </testsuite>
  <testsuite name="filters.createArrayOfProp" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:54" time="0.265" tests="3">
    <testcase classname="filters.createArrayOfProp should return raw payload if payload is not truthy array" name="filters.createArrayOfProp should return raw payload if payload is not truthy array" time="0.002">
    </testcase>
    <testcase classname="filters.createArrayOfProp should return raw payload if opts.prop is not provided" name="filters.createArrayOfProp should return raw payload if opts.prop is not provided" time="0.001">
    </testcase>
    <testcase classname="filters.createArrayOfProp should return array of propeties from array of object" name="filters.createArrayOfProp should return array of propeties from array of object" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.match" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:55" time="0.253" tests="4">
    <testcase classname="filters.match should return input data if opts.pattern is not provided" name="filters.match should return input data if opts.pattern is not provided" time="0.003">
    </testcase>
    <testcase classname="filters.match should return input data if payload is falsy" name="filters.match should return input data if payload is falsy" time="0.001">
    </testcase>
    <testcase classname="filters.match should return input data if no value was matched" name="filters.match should return input data if no value was matched" time="0">
    </testcase>
    <testcase classname="filters.match should return matched value" name="filters.match should return matched value" time="0">
    </testcase>
  </testsuite>
  <testsuite name="filters.trim" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:55" time="0.261" tests="2">
    <testcase classname="filters.trim should return input data if it is not truthy string" name="filters.trim should return input data if it is not truthy string" time="0.003">
    </testcase>
    <testcase classname="filters.trim should trim data successflly" name="filters.trim should trim data successflly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filters.toNumber" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:55" time="0.26" tests="4">
    <testcase classname="filters.toNumber should return number if we can transform payload to number as well" name="filters.toNumber should return number if we can transform payload to number as well" time="0.002">
    </testcase>
    <testcase classname="filters.toNumber should return default value if transformed number is invalid" name="filters.toNumber should return default value if transformed number is invalid" time="0.001">
    </testcase>
    <testcase classname="filters.toNumber should return ZERO if both transformed number and default value were invalid" name="filters.toNumber should return ZERO if both transformed number and default value were invalid" time="0">
    </testcase>
    <testcase classname="filters.toNumber should return input payload if result is not finite number" name="filters.toNumber should return input payload if result is not finite number" time="0">
    </testcase>
  </testsuite>
  <testsuite name="filters.md5" errors="0" failures="0" skipped="0" timestamp="2020-03-30T11:20:55" time="0.266" tests="2">
    <testcase classname="filters.md5 should return input data if payload is not valid string or number" name="filters.md5 should return input data if payload is not valid string or number" time="0.003">
    </testcase>
    <testcase classname="filters.md5 should return md5 value" name="filters.md5 should return md5 value" time="0">
    </testcase>
  </testsuite>
</testsuites>